import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Scanner;

public class GUI {
    private Player player;
    private ImageIcon bedroom;
    private ImageIcon hallway;
    private JFrame frame;
    private JFrame invFrame;
    private JLabel invLabel;
    private JComboBox<Item> inv;
    public GUI(Player player){
        this.player = player;



    }
    public void startGame(){
        ImageIcon bedroom = new ImageIcon("src/images/bedroom.jpg");
        ImageIcon buttonimg = new ImageIcon("images/tumblr_inline_owb47liIoH1rhwzwl_75sq.png");
        JButton forwards = new JButton("forwards", buttonimg);
        JButton backwards = new JButton("backwards");
        JButton left = new JButton("left");
        JButton right = new JButton("right");
        JButton up = new JButton("up");
        JButton down = new JButton("down");
        
        JButton examine = new JButton("Examine");
        JButton drop = new JButton("Drop");
        JButton use = new JButton("Use");
        JLabel invLabel = new JLabel("");
        JLabel emptyInv = new JLabel("Your Inventory Does Not Contain Any Items.");
        
            JComboBox<Item> inv = new JComboBox<Item>(player.getItemArray());
        
        JFrame invFrame = new JFrame("Inventory");
        invFrame.setSize(1000, 1000);
        
        JPanel invComs = new JPanel();
        invComs.setPreferredSize(new Dimension(200,300));
        invComs.setLayout(new GridLayout(1,3));
        invComs.add(examine);
        invComs.add(use);
        invComs.add(drop);
        
        //Initialize Inventory with ComboBox or Label depending on whether inventory is empty or not
        if(player.getItemArray() == null) {
        	invFrame.add(emptyInv, BorderLayout.WEST);
        } else {
            invFrame.add(inv, BorderLayout.WEST);
        }
        
        invFrame.add(invLabel, BorderLayout.EAST);
        invFrame.add(invComs, BorderLayout.SOUTH);
        invFrame.setVisible(true);
        invFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        examine.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		String item_desc = inv.getItemAt(inv.getSelectedIndex()).examine();
        		invLabel.setText(item_desc);
        	}
        });
        
        use.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		player.use(inv.getItemAt(inv.getSelectedIndex()).getName());
        	}
        });
        
        drop.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		player.drop(inv.getItemAt(inv.getSelectedIndex()).getName());
        	}
        });

        JTextArea desc = new JTextArea(player.look());
        desc.setFont(desc.getFont().deriveFont(20f));
        desc.setLineWrap(true);
        desc.setMaximumSize(new Dimension(1000,500));
        forwards.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                desc.setText(player.move("forwards"));
            }
        });

        JFrame frame = new JFrame("Image display");
        frame.setSize(1000, 1000);
        JLabel bed = new JLabel(bedroom);
        bed.setPreferredSize(new Dimension(1000,1000));
        frame.add(bed, BorderLayout.CENTER);

        desc.setPreferredSize(new Dimension(300,100));
        frame.add(desc,BorderLayout.SOUTH);
        JPanel commands = new JPanel();
        commands.setPreferredSize(new Dimension(200,300));
        commands.setLayout(new GridLayout(3,2));
        commands.add(forwards);
        commands.add(backwards);
        commands.add(right);
        commands.add(left);
        commands.add(up);
        commands.add(down);
        commands.setSize(new Dimension(300,500));
        frame.add(commands,BorderLayout.EAST);
        frame.setVisible(true);

    }

}
